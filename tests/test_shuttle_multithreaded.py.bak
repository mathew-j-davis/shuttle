"""
Test Shuttle with simulator using multiple files to test multithreading and throttling
"""

import os
import sys
import time
import unittest
import yaml
import subprocess
import shutil
import datetime
import random
import string
import argparse
from unittest.mock import patch, MagicMock

from tempfile import mkdtemp
from unittest.mock import patch, MagicMock

# Add the required directories to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'mdatp_simulator_app')))

# Import throttling-related modules
from shuttle.daily_processing_tracker import DailyProcessingTracker
from shuttle.throttler import Throttler
from shuttle_common.notifier import Notifier

class TestShuttleMultithreading(unittest.TestCase):
    """Test case for Shuttle multithreading with simulator with throttling support"""
    
    # Default values for parameters that can be overridden via command line
    thread_count = 1
    clean_file_count = 20
    malware_file_count = 10
    file_size_kb = 100
    
    # Default throttling values
    max_files_per_day = 10    # Default max files per day
    max_volume_per_day = 50   # Default max volume in MB per day
    min_free_space = 100      # Default min free space in MB
    initial_files = 0         # Default initial files count in throttle log
    initial_volume = 0.0      # Default initial volume in MB in throttle log
    mock_free_space = 1000    # Default mock free space in MB
    daily_processing_tracker_logs_path = None # Custom path for throttle logs (None means use default)
    
    # Flag to determine if all tests should run
    run_all_tests = True
    
    # Flag to determine if throttling setup should be performed
    setup_throttling = False
    
    def setUp(self):
        """Set up the test environment"""
        # Create temporary directories in SHUTTLE_WORK_DIR/tmp
        work_dir = os.environ.get('SHUTTLE_WORK_DIR', os.path.expanduser('~/shuttle/work'))
        tmp_base = os.path.join(work_dir, 'tmp')
        os.makedirs(tmp_base, exist_ok=True)
        
        # Create a unique test directory with timestamp and random suffix
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
        self.temp_dir = os.path.join(tmp_base, f'multithread_test_{timestamp}_{random_suffix}')        
        os.makedirs(self.temp_dir, exist_ok=True)
        self.source_dir = os.path.join(self.temp_dir, 'source')
        self.destination_dir = os.path.join(self.temp_dir, 'destination')
        self.quarantine_dir = os.path.join(self.temp_dir, 'quarantine')
        self.hazard_dir = os.path.join(self.temp_dir, 'hazard')
        
        os.makedirs(self.source_dir)
        os.makedirs(self.destination_dir)
        os.makedirs(self.quarantine_dir)
        os.makedirs(self.hazard_dir)
        
        # Add logs directory for throttle logs
        self.logs_dir = os.path.join(self.temp_dir, 'logs')
        os.makedirs(self.logs_dir, exist_ok=True)
        
        # Create a mock notifier that we can inspect
        self.notifier = MagicMock(spec=Notifier)
        
        # Configure logging options
        self.logging_options = {
            'log_path': self.logs_dir,
        }
        
        # Set up throttling if enabled
        if self.setup_throttling:
            # Create initial throttle log if specified
            if self.initial_files > 0 or self.initial_volume > 0:
                self.create_throttle_log(self.initial_files, self.initial_volume)
            
            # Set up disk space mocking if specified
            if self.mock_free_space > 0:
                self.setup_disk_space_mocking()
        
        # Path to the run_shuttle_with_simulator.py script
        self.simulator_runner = os.path.join(os.path.dirname(__file__), 'run_shuttle_with_simulator.py')
        
        # Path to a lock file in the temp directory
        self.lock_file = os.path.join(self.temp_dir, 'shuttle.lock')
    
    def tearDown(self):
        """Clean up temporary directories after the test"""
        # Remove lock file if it exists
        if os.path.exists(self.lock_file):
            os.remove(self.lock_file)
        
        # Remove temp directory
    
    def create_throttle_log(self, files_processed=0, volume_processed_mb=0):
        """Create a throttle log file with specified initial values"""
        # Use custom throttle logs path if specified, otherwise use the default logs directory
        if self.__class__.daily_processing_tracker_logs_path:
            throttle_logs_dir = self.__class__.daily_processing_tracker_logs_path
        else:
            throttle_logs_dir = self.logs_dir
            
        os.makedirs(throttle_logs_dir, exist_ok=True)
        
        # Initialize DailyProcessingTracker with the specified values
        throttle_logger = DailyProcessingTracker(data_directory=throttle_logs_dir)
        throttle_logger.initialize_with_values(files_processed, volume_processed_mb)
        
        return throttle_logger
    
    def setup_disk_space_mocking(self):
        """Set up mocking for free disk space check"""
        if not hasattr(self, "mock_free_space") or self.mock_free_space is None:
            return

        # No need for patching here; it's done in the run_shuttle_with_simulator.py script
        
        # Store the initial mock space value for later reference
        self.initial_mock_space = self.mock_free_space
        
        # Print confirmation about what we're setting up
        print(f"\nSetting up disk space mocking with {self.mock_free_space} MB free space")
        print("This will be passed to the simulator script via --mock-free-space parameter")
    
    @classmethod
    def calculate_space_throttling_success(cls, file_size_mb, total_files, mock_free_space_mb, min_free_space_mb):
        """
        Calculate the maximum number of files that can be processed before space throttling.
        
        Args:
            file_size_mb (float): Size of each file in MB
            total_files (int): Total number of files available to process
            mock_free_space_mb (float): Total simulated free space in MB
            min_free_space_mb (float): Minimum free space required to be maintained in MB
            
        Returns:
            int: Maximum number of files that can be processed
            bool: Whether any files can be processed at all
            str: Explanation of the calculation
        """
        # Check if there's enough space for even the first file
        if file_size_mb + min_free_space_mb > mock_free_space_mb:
            return 0, False, f"Cannot process any files: need {file_size_mb + min_free_space_mb}MB for first file, but only {mock_free_space_mb}MB available"
        
        # Calculate max files that can fit (non-strict inequality per throttler implementation)
        # Solving for x: x * file_size_mb + min_free_space_mb <= mock_free_space_mb
        # x <= (mock_free_space_mb - min_free_space_mb) / file_size_mb
        theoretical_max = (mock_free_space_mb - min_free_space_mb) / file_size_mb
        
        # We need the floor of this value (largest integer less than or equal to theoretical_max)
        max_files = int(theoretical_max)
        
        # No need to subtract 1 for exact integers since throttler uses <=
        
        # Cannot process more than the available files
        files_processed = min(max_files, total_files)
        
        # Explanation
        explanation = (
            f"Space analysis:\n"
            f"- Theoretical max files: {theoretical_max:.2f}\n"
            f"- Integer max files: {max_files}\n"
            f"- Files to be processed: {files_processed}\n\n"
            f"After processing {files_processed} files:\n"
            f"- Space used: {files_processed * file_size_mb}MB\n"
            f"- Space remaining: {mock_free_space_mb - (files_processed * file_size_mb)}MB\n"
            f"- Min space required: {min_free_space_mb}MB"
        )
        
        return files_processed, True, explanation
    
    @classmethod
    def calculate_daily_limit_throttling_success(cls, file_size_mb, total_files, max_files_per_day, max_volume_per_day, initial_files=0, initial_volume=0):
        """
        Calculate the maximum number of files that can be processed before daily limit throttling.
        
        Args:
            file_size_mb (float): Size of each file in MB
            total_files (int): Total number of files available to process
            max_files_per_day (int): Maximum number of files allowed per day
            max_volume_per_day (float): Maximum volume allowed per day in MB
            initial_files (int): Initial file count already processed today
            initial_volume (float): Initial volume already processed today in MB
            
        Returns:
            int: Maximum number of files that can be processed
            bool: Whether any files can be processed at all
            str: Explanation of the calculation
        """
        # Check if we've already hit file count limit
        if initial_files >= max_files_per_day:
            return 0, False, f"Cannot process any files: already at max files per day ({initial_files}/{max_files_per_day})"
        
        # Check if we've already hit volume limit
        if initial_volume >= max_volume_per_day:
            return 0, False, f"Cannot process any files: already at max volume per day ({initial_volume:.2f}/{max_volume_per_day} MB)"
        
        # Calculate remaining capacity
        remaining_files = max_files_per_day - initial_files
        remaining_volume = max_volume_per_day - initial_volume
        
        # Calculate limits based on each constraint
        files_limited_by_count = remaining_files
        files_limited_by_volume = int(remaining_volume / file_size_mb)  # Integer division - how many complete files can fit
        
        # The most restrictive limit applies
        max_files = min(files_limited_by_count, files_limited_by_volume)
        
        # Cannot process more than the available files
        files_processed = min(max_files, total_files)
        
        # Determine which limit was the constraint
        limiting_factor = "file count" if files_limited_by_count <= files_limited_by_volume else "volume"
        
        # Explanation
        explanation = (
            f"Daily limit analysis:\n"
            f"- Initial state: {initial_files} files, {initial_volume:.2f} MB used\n"
            f"- Daily limits: {max_files_per_day} files, {max_volume_per_day} MB\n"
            f"- Remaining capacity: {remaining_files} files, {remaining_volume:.2f} MB\n\n"
            f"- Files limited by count: {files_limited_by_count}\n"
            f"- Files limited by volume: {files_limited_by_volume}\n"
            f"- Limiting factor: {limiting_factor}\n\n"
            f"After processing {files_processed} more files:\n"
            f"- Total files: {initial_files + files_processed}/{max_files_per_day}\n"
            f"- Total volume: {initial_volume + (files_processed * file_size_mb):.2f}/{max_volume_per_day} MB"
        )
        
        return files_processed, True, explanation
    
    @classmethod
    def calculate_combined_throttling_success(cls, file_size_mb, total_files, 
                                            mock_free_space_mb, min_free_space_mb,
                                            max_files_per_day, max_volume_per_day,
                                            initial_files=0, initial_volume=0):
        """
        Calculate throttling considering both space limits and daily limits.
        Applies the most restrictive condition.
        
        Args:
            file_size_mb (float): Size of each file in MB
            total_files (int): Total number of files available to process
            mock_free_space_mb (float): Total simulated free space in MB
            min_free_space_mb (float): Minimum free space required to be maintained in MB
            max_files_per_day (int): Maximum number of files allowed per day
            max_volume_per_day (float): Maximum volume allowed per day in MB
            initial_files (int): Initial file count already processed today
            initial_volume (float): Initial volume already processed today in MB
            
        Returns:
            int: Maximum number of files that can be processed
            bool: Whether any files can be processed at all
            str: Explanation of the calculation
        """
        # Calculate space throttling
        space_files, space_can_process, space_explanation = cls.calculate_space_throttling_success(
            file_size_mb, total_files, mock_free_space_mb, min_free_space_mb
        )
        
        # Calculate daily limit throttling
        daily_files, daily_can_process, daily_explanation = cls.calculate_daily_limit_throttling_success(
            file_size_mb, total_files, max_files_per_day, max_volume_per_day, initial_files, initial_volume
        )
        
        # Check if we can process any files at all
        if not space_can_process and not daily_can_process:
            return 0, False, f"Cannot process any files due to both space and daily limits:\n\n{space_explanation}\n\n{daily_explanation}"
        elif not space_can_process:
            return 0, False, f"Cannot process any files due to space limits:\n\n{space_explanation}"
        elif not daily_can_process:
            return 0, False, f"Cannot process any files due to daily limits:\n\n{daily_explanation}"
        
        # Apply the most restrictive limit
        max_files = min(space_files, daily_files)
        
        # Determine which limit was the constraint
        limiting_factor = "space" if space_files <= daily_files else "daily limits"
        
        # Explanation
        explanation = (
            f"Combined throttling analysis:\n"
            f"- Files allowed by space limits: {space_files}\n"
            f"- Files allowed by daily limits: {daily_files}\n"
            f"- Most restrictive factor: {limiting_factor}\n\n"
            f"Space throttling analysis:\n{space_explanation}\n\n"
            f"Daily limit throttling analysis:\n{daily_explanation}"
        )
        
        return max_files, True, explanation
        
        # No patching needed here - mocking is now done in the simulator script
        
    
    def create_test_files(self, clean_file_count=5, malware_file_count=5, file_size_kb=10):
        """
        Create test files in the source directory.
        
        Args:
            clean_file_count: Number of clean files to create
            malware_file_count: Number of malware files to create
            file_size_kb: Size of each file in KB
            
        Returns:
            tuple: (list of clean file paths, list of malware file paths)
        """
        clean_files = []
        malware_files = []
        
        # Generate random data once and reuse
        random_data = ''.join(random.choices(string.ascii_letters + string.digits, 
                                           k=file_size_kb * 1024))
        
        # Create clean files
        for i in range(clean_file_count):
            filename = f'clean_file_{i:03d}.txt'
            filepath = os.path.join(self.source_dir, filename)
            with open(filepath, 'w') as f:
                f.write(random_data)
            clean_files.append(filepath)
        
        # Create malware files (containing the word "malware" to trigger detection)
        for i in range(malware_file_count):
            filename = f'malware_file_{i:03d}.txt'
            filepath = os.path.join(self.source_dir, filename)
            with open(filepath, 'w') as f:
                # Insert "malware" string in the middle of the data to trigger detection
                midpoint = len(random_data) // 2
                malware_data = random_data[:midpoint] + "malware" + random_data[midpoint:]
                f.write(malware_data)
            malware_files.append(filepath)
        
        return clean_files, malware_files

    def test_shuttle_multithreading(self):
        """Test Shuttle with multiple files to check multithreading"""
        # Run the test
        result = self.run_shuttle()
        
        # Verify results
        self.verify_test_results()
        
    def test_space_throttling(self):
        """Test throttling based on available disk space"""
        # Enable throttling for this test
        self.setup_throttling = True
        
        # Set low mock free space to trigger throttling
        original_mock_space = self.mock_free_space
        
        # Calculate expected throttling behavior
        file_size_mb = self.file_size_kb / 1024
        total_files = self.clean_file_count + self.malware_file_count
        expected_files, can_process, explanation = self.calculate_space_throttling_success(
            file_size_mb=file_size_mb,
            total_files=total_files,
            mock_free_space_mb=self.mock_free_space,
            min_free_space_mb=self.min_free_space
        )
        
        print(f"\nTest space throttling analysis:\n{explanation}")
        
        self.setup_disk_space_mocking()
        
        # Run with throttling enabled
        result = self.run_shuttle_with_throttling()
        
        # Count files actually processed
        files_processed = len(os.listdir(self.destination_dir))
        
        # Verify that correct throttling occurred
        if expected_files == 0:
            # Should see throttling messages
            self.assertIn("Disk space throttling activated", result['output'])
            self.assertIn("Stopping file processing due to insufficient disk space", result['output'])
            self.assertEqual(files_processed, 0, "No files should be processed when throttling is active")
        else:
            # Should process exactly the predicted number of files
            self.assertEqual(files_processed, expected_files, 
                             f"Should process exactly {expected_files} files before throttling")
            
            if expected_files < total_files:
                # Should still see throttling messages if not all files were processed
                self.assertIn("Disk space throttling activated", result['output'])
                self.assertIn("Stopping file processing due to insufficient disk space", result['output'])
        
        # Reset mock space
        self.mock_free_space = original_mock_space
        
    def test_daily_file_count_limit_basic(self):
        """Test throttling with daily file count limit - basic test"""
        # Store original file size
        original_file_size = self.file_size_kb
        
        # Create throttle log with initial values
        self.create_throttle_log(files_processed=self.initial_files)
        
        # Run shuttle with throttling enabled
        result = self.run_shuttle_with_throttling()
        
        # Get the number of files processed (should be limited by max_files_per_day)
        processed_count = len(os.listdir(self.destination_dir))
        expected_count = max(0, self.max_files_per_day - self.initial_files)
        self.assertLessEqual(processed_count, expected_count)
        
        # Reset file size
        self.file_size_kb = original_file_size
        
    def test_daily_file_count_limit_no_existing_log(self):
        """Test throttling with daily file count limit without existing log"""
        # Create test files (more than the limit)
        clean_files, malware_files = self.create_test_files(
            clean_file_count=15, 
            malware_file_count=0, 
            file_size_kb=self.file_size_kb
        )
        
        # Run shuttle with daily file count limit
        self.max_files_per_day = 10  # Limit of 10 files/day
        self.min_free_space = 0      # No space throttling
        self.max_volume_per_day = 0  # No volume limit
        result = self.run_shuttle_with_throttling()
        
        # Verify throttling occurred after processing some files
        processed_count = len(os.listdir(self.destination_dir))
        self.assertEqual(processed_count, 10)  # Should process 10 files before hitting limit
        
    def test_daily_volume_limit(self):
        """Test throttling with daily volume limit"""
        # Enable throttling for this test
        self.setup_throttling = True
        
        # Set larger file size to test volume limits
        original_file_size = self.file_size_kb
        self.file_size_kb = 5 * 1024  # 5MB files in KB
        
        # Set parameters for this test
        self.max_files_per_day = 0    # No file count limit
        self.min_free_space = 0       # No space throttling
        self.max_volume_per_day = 50  # Limit of 50MB/day
        
        # Create initial log with some volume already processed (30MB)
        self.initial_volume = 30
        self.create_throttle_log(files_processed=6, volume_processed_mb=self.initial_volume)
        
        # Run with throttling enabled
        result = self.run_shuttle_with_throttling()
        
        # Verify throttling occurred after processing some files
        self.assertIn("Daily Limit", result['output'])
        self.assertIn("volume limit", result['output'])
        
        # Should process 4 files (20MB) before hitting limit (30MB + 20MB = 50MB)
        processed_count = len(os.listdir(self.destination_dir))
        self.assertLessEqual(processed_count, 4)
        
        # Reset file size
        self.file_size_kb = original_file_size
        
    def test_throttling_disabled(self):
        """Test that throttling can be disabled"""
        # Set up mocking to simulate insufficient space
        original_mock_space = self.mock_free_space
        self.mock_free_space = 5  # Very low free space
        self.setup_disk_space_mocking()
        
        # Create throttle log with counts exceeding limits
        self.create_throttle_log(files_processed=100, volume_processed_mb=1000)
        
        # Create test files
        clean_files, malware_files = self.create_test_files(clean_file_count=5)
        
        # Run shuttle with throttling disabled
        result = self.run_shuttle_no_throttling()
        
        # Verify all files were processed despite throttling conditions
        self.assertEqual(len(os.listdir(self.destination_dir)), 5)
        
        # Reset mock space
        self.mock_free_space = original_mock_space
        
    def test_daily_file_count_limit_with_existing_log(self):
        """Test throttling with daily file count limit and existing log"""
        # Create throttle log with some files already processed
        initial_files = 7
        self.create_throttle_log(files_processed=initial_files)
        
        # Create test files (enough to exceed limit when added to initial count)
        clean_files, malware_files = self.create_test_files(
            clean_file_count=5, 
            malware_file_count=0, 
            file_size_kb=self.file_size_kb
        )
        
        # Run shuttle with daily file count limit
        self.max_files_per_day = 10  # Limit of 10 files/day
        self.min_free_space = 0      # No space throttling
        self.max_volume_per_day = 0  # No volume limit
        result = self.run_shuttle_with_throttling()
        
        # Verify throttling occurred after processing some files
        processed_count = len(os.listdir(self.destination_dir))
        self.assertEqual(processed_count, 3)  # Should process 3 files to reach limit of 10
    
    def test_daily_volume_limit_with_existing_log(self):
        """Test throttling with daily volume limit and existing log"""
        # Create throttle log with some volume already processed (30MB)
        self.create_throttle_log(files_processed=6, volume_processed_mb=30)
        
        # Create test files (each 5MB)
        file_size_kb = 5 * 1024  # 5MB in KB
        clean_files, malware_files = self.create_test_files(
            clean_file_count=10, 
            malware_file_count=0, 
            file_size_kb=file_size_kb
        )
        
        # Run shuttle with daily volume limit
        self.max_files_per_day = 0   # No file count limit
        self.min_free_space = 0      # No space throttling
        self.max_volume_per_day = 50 # Limit of 50MB/day
        result = self.run_shuttle_with_throttling()
        
        # Verify throttling occurred after processing some files
        # Should process 4 files (20MB) before hitting limit (30MB + 20MB = 50MB)
        processed_count = len(os.listdir(self.destination_dir))
        self.assertEqual(processed_count, 4)
    
    def test_multithreading_with_throttling(self):
        """Test multi-threaded processing with throttling"""
        # Set up a higher thread count
        original_thread_count = self.thread_count
        self.thread_count = 4
        
        # Create test files (each 2MB)
        file_size_kb = 2 * 1024  # 2MB in KB
        clean_files, malware_files = self.create_test_files(
            clean_file_count=20, 
            malware_file_count=0, 
            file_size_kb=file_size_kb
        )
        
        # Run shuttle with volume limit that should allow exactly half the files
        self.max_files_per_day = 0   # No file count limit
        self.min_free_space = 0      # No space throttling
        self.max_volume_per_day = 20 # Limit of 20MB/day (should allow 10 files)
        
        start_time = time.time()
        result = self.run_shuttle_with_throttling()
        end_time = time.time()
        
        # Verify throttling occurred correctly
        processed_count = len(os.listdir(self.destination_dir))
        self.assertEqual(processed_count, 10)  # Should process 10 files (20MB total)
        
        # Reset thread count
        self.thread_count = original_thread_count
        
    # run_shuttle_with_throttling is now defined below
    
    def run_shuttle_with_throttling(self, custom_min_free_space=None, custom_max_files=None, custom_max_volume=None, create_test_files=False):
        """Test Shuttle with throttling enabled"""
        # Store original mock space value
        original_mock_space = self.mock_free_space
        
        # Run shuttle with throttling parameters and mock free space
        result = self.run_shuttle(
            create_test_files=create_test_files,  # Default to False to respect existing file creation
            min_free_space=custom_min_free_space or self.min_free_space,
            max_files=custom_max_files or self.max_files_per_day,
            max_volume=custom_max_volume or self.max_volume_per_day,
            mock_free_space=self.mock_free_space
        )
        
        # Reset mock space
        self.mock_free_space = original_mock_space
        return result
    
    def run_shuttle_no_throttling(self):
        """Test Shuttle with throttling disabled"""
        # Run shuttle with base command (no throttling parameters)
        return self.run_shuttle()
    
    def build_base_command(self):
        """Build the base command for running Shuttle with simulator"""
        # Create the same throttle_logs_dir path that we use in create_throttle_log()
        throttle_logs_parent = self.logs_dir
        
        return [
            sys.executable,  # Use the current Python interpreter
            self.simulator_runner,
            '--source-path', self.source_dir,
            '--destination-path', self.destination_dir,
            '--quarantine-path', self.quarantine_dir,
            '--hazard-archive-path', self.hazard_dir,
            '--on-demand-defender',  # Boolean flag, presence means True
            # No --on-demand-clam-av to avoid ClamAV errors
            '--skip-stability-check',  # Boolean flag, presence means True
            '--max-scan-threads', str(self.thread_count),  # Thread count from command line
            '--log-path', throttle_logs_parent,  # Use the parent directory of throttle_logs
            '--lock-file', self.lock_file
        ]
    
    def add_throttling_params(self, cmd, min_free_space=None, max_files=None, max_volume=None):
        """Add throttling parameters to the command"""
        # Add the throttle flag
        cmd.append('--throttle')
        
        if min_free_space is not None:
            cmd.extend(['--throttle-free-space', str(min_free_space)])
        if max_files is not None:
            cmd.extend(['--throttle-max-file-count-per-day', str(max_files)])
        if max_volume is not None:
            cmd.extend(['--throttle-max-file-volume-per-day', str(max_volume)])
            
        # ALWAYS pass the logs directory as the throttle logs path
        # This ensures Shuttle looks for throttle logs in the same place they were created
        cmd.extend(['--throttle-logs-path', self.logs_dir])
            
        return cmd
    
    def run_shuttle(self, cmd=None, create_test_files=True, clean_file_count=None, malware_file_count=None, 
                   min_free_space=None, max_files=None, max_volume=None, mock_free_space=None):
        """Run Shuttle with the given command or default parameters"""
        if cmd is None:
            # Create files if requested
            if create_test_files:
                # Use provided counts or defaults
                clean_files, malware_files = self.create_test_files(
                    clean_file_count or self.clean_file_count, 
                    malware_file_count or self.malware_file_count, 
                    file_size_kb=self.file_size_kb
                )
                print(f"Created {len(clean_files)} clean files and {len(malware_files)} malware files")
            
            # Build base command
            cmd = self.build_base_command()
            
            # Add throttling parameters if specified
            cmd = self.add_throttling_params(cmd, min_free_space, max_files, max_volume)
            
            # Add mock free space parameter if specified
            if mock_free_space is not None and mock_free_space > 0:
                cmd.extend(['--mock-free-space', str(mock_free_space)])
        
        # Record start time
        start_time = time.time()
        
        # Run the command and stream output in real-time
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1  # Line buffered
        )
        
        # Collect output while streaming it to console
        output_lines = []
        print("\n--- Shuttle Output Begin ---")
        for line in iter(process.stdout.readline, ''):
            if not line:
                break
            # Strip trailing whitespace but keep the newline at the end if it exists
            cleaned_line = line.rstrip('\n')
            print(cleaned_line)  # Print with proper line breaks
            output_lines.append(line)
        print("--- Shuttle Output End ---\n")
        
        # Close stdout and get return code
        process.stdout.close()
        return_code = process.wait()
        
        # Record end time
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        # Join all output for error reporting if needed
        output = ''.join(output_lines)
        
        # Check that the process ran successfully
        self.assertEqual(return_code, 0, 
                        f"Process failed with code {return_code}\nOutput: {output}")
        
        print(f"Processing completed in {elapsed_time:.2f} seconds")
        
        return {
            'output': output,
            'return_code': return_code,
            'elapsed_time': elapsed_time
        }
    
    def verify_test_results(self):
        """Verify test results for clean and malware files"""
        # Verify clean files were moved to destination
        clean_file_count = 0
        for filename in os.listdir(self.destination_dir):
            if filename.startswith('clean_file_'):
                clean_file_count += 1
        
        # Verify malware files are not in destination
        malware_file_count = 0
        for filename in os.listdir(self.destination_dir):
            if filename.startswith('malware_file_'):
                malware_file_count += 1
        
        # Verify counts match expectations
        self.assertEqual(clean_file_count, len(clean_files), 
                         f"Expected {len(clean_files)} clean files in destination, found {clean_file_count}")
        self.assertEqual(malware_file_count, 0, 
                         f"Expected 0 malware files in destination, found {malware_file_count}")
        
        # Check hazard directory if configured
        hazard_file_count = len(os.listdir(self.hazard_dir))
        print(f"Files in hazard directory: {hazard_file_count}")
        
        # Additional detailed verification could be added here
        # ...

def parse_args():
    """Parse command line arguments, separating test config args from unittest args"""
    # Create parser for our custom arguments
    parser = argparse.ArgumentParser(description='Test Shuttle multithreading with configurable parameters',
                                     add_help=False)  # Disable help to avoid conflicts
    
    # Add custom test arguments for file creation
    parser.add_argument('--threads', type=int, default=1, help='Number of threads to use for scanning')
    parser.add_argument('--clean-file-count', type=int, default=20, help='Number of clean files to create')
    parser.add_argument('--malware-file-count', type=int, default=10, help='Number of malware files to create')
    parser.add_argument('--file-size', type=int, default=100, help='Size of test files in KB')
    
    # Add throttling-related parameters
    parser.add_argument('--file-size-kb', type=int, default=100, help='Size of test files in KB (same as --file-size)')
    parser.add_argument('--file-size-mb', type=float, default=0, help='Size of test files in MB (converted to KB automatically)')
    parser.add_argument('--initial-files', type=int, default=0, help='Initial files count in throttle log')
    parser.add_argument('--initial-volume', type=float, default=0.0, help='Initial volume in throttle log (MB)')
    parser.add_argument('--mock-free-space', type=int, default=1000, help='Simulated free disk space (MB)')
    parser.add_argument('--max-volume-per-day', type=int, default=50, help='Maximum volume to process per day (MB)')
    parser.add_argument('--max-files-per-day', type=int, default=10, help='Maximum files to process per day')
    parser.add_argument('--min-free-space', type=int, default=100, help='Minimum free space required (MB)')
    parser.add_argument('--throttle-logs-path', type=str, help='Custom path for throttle logs')
    
    # Parse only our known arguments, ignoring others (which will be for unittest)
    args, remaining = parser.parse_known_args()
    return args, remaining

if __name__ == '__main__':
    # Parse command line args before unittest runs, separating our config from unittest args
    args, remaining_args = parse_args()
    
    # Store args in global variables that test can access
    TestShuttleMultithreading.thread_count = args.threads
    TestShuttleMultithreading.clean_file_count = args.clean_file_count
    TestShuttleMultithreading.malware_file_count = args.malware_file_count
    
    # Handle file size parameters with priority: file-size-mb > file-size-kb > file-size
    if args.file_size_mb > 0:
        # Convert MB to KB (1 MB = 1024 KB)
        TestShuttleMultithreading.file_size_kb = int(args.file_size_mb * 1024)
    elif args.file_size_kb != 100:
        TestShuttleMultithreading.file_size_kb = args.file_size_kb
    else:
        TestShuttleMultithreading.file_size_kb = args.file_size
    
    # Set throttling parameters
    TestShuttleMultithreading.initial_files = args.initial_files
    TestShuttleMultithreading.initial_volume = args.initial_volume
    TestShuttleMultithreading.mock_free_space = args.mock_free_space
    TestShuttleMultithreading.max_volume_per_day = args.max_volume_per_day
    TestShuttleMultithreading.max_files_per_day = args.max_files_per_day
    TestShuttleMultithreading.min_free_space = args.min_free_space
    TestShuttleMultithreading.daily_processing_tracker_logs_path = args.daily_processing_tracker_logs_path
    
    # Calculate file size in MB for throttling prediction
    file_size_mb = TestShuttleMultithreading.file_size_kb / 1024
    total_files = TestShuttleMultithreading.clean_file_count + TestShuttleMultithreading.malware_file_count
    
    # Calculate expected throttling behavior using the combined calculator
    expected_files, can_process, throttling_explanation = TestShuttleMultithreading.calculate_combined_throttling_success(
        file_size_mb=file_size_mb,
        total_files=total_files,
        mock_free_space_mb=TestShuttleMultithreading.mock_free_space,
        min_free_space_mb=TestShuttleMultithreading.min_free_space,
        max_files_per_day=TestShuttleMultithreading.max_files_per_day,
        max_volume_per_day=TestShuttleMultithreading.max_volume_per_day,
        initial_files=TestShuttleMultithreading.initial_files,
        initial_volume=TestShuttleMultithreading.initial_volume
    )
    
    # Print a summary of test parameters for clarity
    print("\nRunning tests with the following parameters:")
    print(f"  Thread count: {TestShuttleMultithreading.thread_count}")
    print(f"  File counts: {TestShuttleMultithreading.clean_file_count} clean, {TestShuttleMultithreading.malware_file_count} malware")
    print(f"  File size: {TestShuttleMultithreading.file_size_kb} KB ({file_size_mb:.2f} MB)")
    print(f"  Mock free space: {TestShuttleMultithreading.mock_free_space} MB")
    print(f"  Daily limits: {TestShuttleMultithreading.max_files_per_day} files, {TestShuttleMultithreading.max_volume_per_day} MB")
    print(f"  Min free space: {TestShuttleMultithreading.min_free_space} MB")
    print(f"  Initial log values: {TestShuttleMultithreading.initial_files} files, {TestShuttleMultithreading.initial_volume} MB")
    print("\nSpace Throttling Prediction:")
    print(f"  Expected files processed: {expected_files} of {total_files}")
    print(f"  {throttling_explanation}\n")
    
    # Run the tests with the remaining args (which includes unittest args like -k)
    # First argument is the script name, which unittest expects
    unittest.main(argv=[sys.argv[0]] + remaining_args)
