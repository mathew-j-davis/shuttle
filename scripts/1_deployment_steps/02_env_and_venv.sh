#!/bin/bash
# 02_env_and_venv.sh - Set up Shuttle environment variables and optionally create venv
#
# Usage: 
#   ./02_env_and_venv.sh                    # Use system production defaults (for services)
#   ./02_env_and_venv.sh -e                 # Use development defaults
#   ./02_env_and_venv.sh -u                 # Use user production defaults
#   ./02_env_and_venv.sh --do-not-create-venv  # Skip venv creation (any mode)
#   ./02_env_and_venv.sh [config] [venv] [work]  # Use custom paths
#
# Flags can be combined: ./02_env_and_venv.sh -e --do-not-create-venv

# Get home directory and project root
HOME_DIR=$(eval echo ~$USER)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# Initialize flags
DEV_MODE=false
USER_MODE=false
CREATE_VENV=true

# Parse flags
REMAINING_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -e)
            DEV_MODE=true
            shift
            ;;
        -u)
            USER_MODE=true
            shift
            ;;
        --do-not-create-venv)
            CREATE_VENV=false
            shift
            ;;
        *)
            REMAINING_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${REMAINING_ARGS[@]}"

# Set default paths based on mode
if [[ "$DEV_MODE" == true ]]; then
    # Development defaults - use project root
    DEFAULT_CONFIG_PATH="$PROJECT_ROOT/config/config.conf"
    DEFAULT_VENV_PATH="$PROJECT_ROOT/.venv"
    DEFAULT_TEST_WORK_DIR="$PROJECT_ROOT/test_area"
    DEFAULT_TEST_CONFIG_PATH="$PROJECT_ROOT/test_area/test_config.conf"
    echo "Using development mode defaults..."
elif [[ "$USER_MODE" == true ]]; then
    # User production defaults - under user's home directory
    DEFAULT_CONFIG_PATH="$HOME_DIR/.config/shuttle/config.conf"
    DEFAULT_VENV_PATH="$HOME_DIR/.local/share/shuttle/venv"
    DEFAULT_TEST_WORK_DIR="$HOME_DIR/.local/share/shuttle/test_area"
    DEFAULT_TEST_CONFIG_PATH="$HOME_DIR/.local/share/shuttle/test_area/test_config.conf"
    echo "Using user production mode defaults..."
else
    # System production defaults - shared paths for service accounts
    DEFAULT_CONFIG_PATH="/etc/shuttle/config.conf"
    DEFAULT_VENV_PATH="/opt/shuttle/venv"
    DEFAULT_TEST_WORK_DIR="/var/lib/shuttle"
    DEFAULT_TEST_CONFIG_PATH="/var/lib/shuttle/test_config.conf"
    echo "Using system production mode defaults..."
fi

# Parse remaining arguments (allow overriding even in dev mode)
CONFIG_PATH=${1:-$DEFAULT_CONFIG_PATH}
VENV_PATH=${2:-$DEFAULT_VENV_PATH}
TEST_WORK_DIR=${3:-$DEFAULT_TEST_WORK_DIR}
TEST_CONFIG_PATH=${4:-$DEFAULT_TEST_CONFIG_PATH}

# Create directories (but not venv yet)
mkdir -p $(dirname "$CONFIG_PATH")
mkdir -p $(dirname "$VENV_PATH")  # Only create parent directory
mkdir -p "$TEST_WORK_DIR"

# Set environment variables for this session
export SHUTTLE_CONFIG_PATH="$CONFIG_PATH"
export SHUTTLE_TEST_WORK_DIR="$TEST_WORK_DIR"
export SHUTTLE_TEST_CONFIG_PATH="$TEST_CONFIG_PATH"

# Determine where to save shuttle_env.sh
# Save the environment file in the same directory as the config file
# This keeps all shuttle configuration together in one place
CONFIG_DIR="$(dirname "$CONFIG_PATH")"
ENV_FILE_PATH="$CONFIG_DIR/shuttle_env.sh"

# Create a sourceable file
cat > "$ENV_FILE_PATH" << EOF
#!/bin/bash
# Shuttle environment variables
# Generated by 02_env_and_venv.sh on $(date)

export SHUTTLE_CONFIG_PATH="$CONFIG_PATH"
export SHUTTLE_TEST_WORK_DIR="$TEST_WORK_DIR"
export SHUTTLE_TEST_CONFIG_PATH="$TEST_CONFIG_PATH"

# Display current settings
echo "Shuttle environment loaded:"
echo "  SHUTTLE_CONFIG_PATH=\$SHUTTLE_CONFIG_PATH"
echo "  SHUTTLE_TEST_WORK_DIR=\$SHUTTLE_TEST_WORK_DIR"
echo "  SHUTTLE_TEST_CONFIG_PATH=\$SHUTTLE_TEST_CONFIG_PATH"
EOF

# Make the env file executable
chmod +x "$ENV_FILE_PATH"

# In development mode, also create a .env file in project root for IDEs/tools
if [[ "$DEV_MODE" == true ]]; then
    DOT_ENV_PATH="$PROJECT_ROOT/.env"
    cat > "$DOT_ENV_PATH" << EOF
# Python paths for IDE import resolution (append to existing PYTHONPATH)
PYTHONPATH=./src/shared_library:./src/shuttle_app:./src/shuttle_defender_test_app:./tests:$PYTHONPATH

# Shuttle environment variables
SHUTTLE_CONFIG_PATH=$CONFIG_PATH
SHUTTLE_TEST_WORK_DIR=$TEST_WORK_DIR
SHUTTLE_TEST_CONFIG_PATH=$TEST_CONFIG_PATH

# Development logging
SHUTTLE_LOG_LEVEL=DEBUG
EOF
    echo "Development .env file created at: $DOT_ENV_PATH"
fi

# Create virtual environment if requested
if [[ "$CREATE_VENV" == true ]]; then
    # Check if Python3 is available
    if ! command -v python3 &>/dev/null; then
        echo "ERROR: Python3 is not installed. Cannot create virtual environment."
        echo "Please run 00_sudo_install_python.sh first."
        exit 1
    fi
    
    # Check if venv already exists
    if [[ -d "$VENV_PATH" ]] && [[ -f "$VENV_PATH/bin/activate" ]]; then
        echo "Virtual environment already exists at: $VENV_PATH"
    else
        # Create virtual environment
        echo "Creating virtual environment at: $VENV_PATH"
        python3 -m venv "$VENV_PATH"
        
        if [[ $? -eq 0 ]]; then
            # Set exec permissions on activate
            chmod +x "$VENV_PATH/bin/activate"
            echo "✅ Virtual environment created successfully"
            
            # Upgrade pip in the new venv
            "$VENV_PATH/bin/python" -m pip install --upgrade pip
            
            # Create activation helper script
            ACTIVATE_SCRIPT="$CONFIG_DIR/shuttle_activate_virtual_environment.sh"
            cat > "$ACTIVATE_SCRIPT" << EOF
#!/bin/bash
# Shuttle virtual environment activation script
# Generated by 02_env_and_venv.sh on $(date)

# Activate the virtual environment
source "$VENV_PATH/bin/activate"

# Show status
echo "Shuttle virtual environment activated:"
echo "  Virtual environment: $VENV_PATH"
echo "  Python: \$(which python)"
echo "  Python version: \$(python --version)"
EOF
            chmod +x "$ACTIVATE_SCRIPT"
            echo "✅ Virtual environment activation script created: $ACTIVATE_SCRIPT"
        else
            echo "❌ Failed to create virtual environment"
            exit 1
        fi
    fi
else
    echo "Skipping virtual environment creation (--do-not-create-venv flag set)"
fi

echo ""
echo "Environment variables set:"
echo "  SHUTTLE_CONFIG_PATH=$SHUTTLE_CONFIG_PATH"
echo "  SHUTTLE_TEST_WORK_DIR=$SHUTTLE_TEST_WORK_DIR"
echo "  SHUTTLE_TEST_CONFIG_PATH=$SHUTTLE_TEST_CONFIG_PATH"
echo ""
echo "Environment file created at: $ENV_FILE_PATH"

if [[ "$CREATE_VENV" == true ]] && [[ -f "$VENV_PATH/bin/activate" ]]; then
    echo ""
    echo "To activate the virtual environment:"
    echo "  source $CONFIG_DIR/shuttle_activate_virtual_environment.sh"
    echo "  (or directly: source $VENV_PATH/bin/activate)"
fi

echo ""
echo "These variables are set for the current session."
echo "For future sessions, source the environment with:"
echo "  source $ENV_FILE_PATH"