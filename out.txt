diff --git a/scripts/1_install.sh b/scripts/1_install.sh
index 973486d..65e6688 100755
--- a/scripts/1_install.sh
+++ b/scripts/1_install.sh
@@ -2361,7 +2361,7 @@ wizard_completion_options() {
                 
                 if save_installation_instructions "$INSTRUCTIONS_FILE"; then
                     show_saved_config_usage "$0" "$INSTRUCTIONS_FILE" "instructions" "true"
-                    read -p ""  # Wait for Enter
+                    # show_saved_config_usage already asks user to proceed, no need for extra read
                     execute_installation
                     show_next_steps
                 fi
diff --git a/src/shared_library/shuttle_common/files.py b/src/shared_library/shuttle_common/files.py
index a2cde5f..c562d0b 100644
--- a/src/shared_library/shuttle_common/files.py
+++ b/src/shared_library/shuttle_common/files.py
@@ -200,9 +200,8 @@ def verify_file_integrity(source_file_path, comparison_file_path):
     result['a'] = None
     result['b'] = None
  
-    if os.path.getsize(source_file_path) == 0 or os.path.getsize(comparison_file_path) == 0:
-        logger.error("One of the files is empty")
-        return result
+    # Zero-length files are valid and can be verified by comparing hashes
+    # Remove the check that rejected empty files
 
     source_hash = get_file_hash(source_file_path)
     comparison_hash = get_file_hash(comparison_file_path)
diff --git a/src/shuttle_app/shuttle/post_scan_processing.py b/src/shuttle_app/shuttle/post_scan_processing.py
index 076e6c0..de2cc6f 100644
--- a/src/shuttle_app/shuttle/post_scan_processing.py
+++ b/src/shuttle_app/shuttle/post_scan_processing.py
@@ -48,7 +48,29 @@ def handle_suspect_source_file(
         
     source_hash = get_file_hash(source_file_path)
     
-    if source_hash == quarantine_hash:
+    if source_hash is None:
+        # Hash computation failed - check if both files are zero-length
+        try:
+            source_size = os.path.getsize(source_file_path)
+            quarantine_size = os.path.getsize(quarantine_file_path)
+            
+            if source_size == 0 and quarantine_size == 0:
+                logger.info(f"Both source and quarantine files are zero-length, treating as match: {source_file_path}")
+                # Treat as hash match for zero-length files
+                if not handle_suspect_file(
+                    source_file_path,
+                    hazard_archive_path,
+                    key_file_path
+                ):
+                    logger.error(f"Failed to archive zero-length source file: {source_file_path}")
+                    return False
+            else:
+                logger.error(f"Could not compute hash for source file {source_file_path} (size: {source_size})")
+                logger.error(f"Not archiving source file due to hash computation failure")
+        except Exception as e:
+            logger.error(f"Could not check file sizes for {source_file_path}: {e}")
+            logger.error(f"Not archiving source file due to size check failure")
+    elif source_hash == quarantine_hash:
         logger.error(f"Hash match for source file {source_file_path}")
         logger.error(f"Archiving source file")
         
